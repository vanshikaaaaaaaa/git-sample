
vector<int> res;
        int i = 0, j = 0;
        while(i < N && j < M)
        {
            if(arr1[i] < arr2[j])
            {
                i++;
            }
            else if(arr2[j] < arr1[i])
            {
                j++;
            }
            else if(i > 0 && arr1[i]==arr2[j] && arr1[i-1]==arr1[i])
            {
                i++;
                j++;
            }
            else
            {
                res.push_back(arr1[i]);
                i++;
                j++;
            }
        }
        return res;


    //Function to return a list containing the union of the two arrays. 
    vector<int> findUnion(int arr1[], int arr2[], int n, int m)
    {
        //Your code here
        //return vector with correct order of elements
          
        vector<int> ans;
        
        
        int i=0; int j=0;
        
        while(i<n and j<m)
        {

 
            if(arr1[i]<arr2[j])
            {
                ans.push_back(arr1[i]);
                i++;
            }
            else  if(arr1[i]>arr2[j])
            {
                ans.push_back(arr2[j]);
                j++;
            }
            else 
            {
                // if(arr1[i] == arr2[j])
                ans.push_back(arr1[i]);
                i++;
                j++;
            }
        }
        
        while( i<n )
        {
            if(arr1[i-1]!=arr1[i])
            {
            ans.push_back(arr1[i]);}
            i++;
        }
        while(j<m)
        {
            
            if(arr2[j-1]!=arr2[j])
            {
                ans.push_back(arr2[j]);
            }
            j++;
        }
        return ans;
        
    }
  int cnt0=0,cnt1=0,cnt2=0;
        for(int i=0;i<n;i++){
            if(arr[i] == 0)cnt0++;
            else if (arr[i] == 1)cnt1++;
            else cnt2++;
        }
        //cout<<cnt0<<" "<<cnt1<<" "<<cnt2<<endl;
        for(int i=0;i<n;i++){
            if(cnt0){
                arr[i] =0;
                cnt0--;
            }
            else if(cnt1){
                arr[i]=1;
                cnt1--;
            }
            else if(cnt2){
                arr[i] = 2;
                cnt2--;
            }
        }
    }


 vector<vector<int>> vec;
       if(A[0].size()!=B.size())   return vec;
       for(int j=0;j<A.size();j++){
           vector<int> t;
           for(int i=0 ; i<B[0].size();i++){
               int temp = 0;
               for(int c=0;c<B.size();c++){
                   temp+=A[j][c]*B[c][i];
               }
               t.push_back(temp);
           }
           vec.push_back(t);
       }
       return vec;

    bool search(vector<vector<int> > matrix, int n, int m, int x) 
    {

         int i=0,j=n-1;
         while( i<n && j>=0 )
         {
             if(matrix[i][j]==x)    return true;
             if(matrix[i][j]>x)     j--;
             else   i++;
         }
         return false;
lec 14 15 20